import sporco.linalg as cr
import numpy as np
import sporco.linalg as sc
import sporco.linalg as util
from typing import Any, Literal, Optional, Union, overload

class Pdsm(sc.IterativeSolver):
    class Option:
        rho_p: float
        rho_d: float
        theta: float
        def __init__(self, rho_p: Any, rho_d: Any, theta: Any) -> None: ...
    timer: util.Timer
    opt: Pdsm.Option
    def __new__(cls: Any, *args: Any, **kwargs: Any) -> Pdsm: ...
    def step(self) -> None: ...
    def primal_step(self) -> None: ...
    def dual_step(self) -> None: ...

class GenericConvBPDN(Pdsm):
    class Option(Pdsm.Option):
        def __init__(self, rho_p: Any, rho_d: Any, theta: Any) -> None: ...

class ConvBPDNL1(GenericConvBPDN):
    class Option(GenericConvBPDN.Option):
        h: None
        def __init__(self, rho_p: Any, rho_d: Any, theta: Any, h: Any) -> None: ...

class ConvBPDNL1L1(GenericConvBPDN):
    class Option(GenericConvBPDN.Option):
        def __init__(self, rho_p: Any, rho_d: Any, theta: Any) -> None: ...
    cri: cr.CSC_ConvRepIndexing
    opt: ConvBPDNL1L1.Option
    D: np.ndarray
    X: np.ndarray
    S: np.ndarray
    Df: np.ndarray
    Xf: np.ndarray
    Sf: np.ndarray
    YU: Any = ...
    def __init__(self, D: np.ndarray, S: np.ndarray, opt: Optional[ConvBPDNL1L1.Option]=..., dimK: Union[Literal[1, 2], None, int]=..., dimN: int=...) -> None: ...
    DSf: Any = ...
    @overload
    def setdict(self) -> None: ...
    @overload
    def setdict(self, D: np.ndarray) -> Any: ...
    def utf8(value: Any) -> None: ...
    def primal_step(self) -> None: ...
    def dual_step(self) -> None: ...
